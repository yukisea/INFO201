cups_of_coffee <- 2
1+2
x<-6
morning_coffee <- 2
all_coffee <- morning_coffee * 2
1+2
x<-6
morning_coffee <- 3
all_coffee <- morning_coffee * 2
total_coffeene <- all_coffee * 200
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Tokyo"
# Assign your name to the variable `my_name`
my_name <- "Yuki Ono"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68.1
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- total_cost %/% puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Tokyo"
# Assign your name to the variable `my_name`
my_name <- "Yuki Ono"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68.1
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% puppy_price
install.packages(stringr)
install.packages("stringr")
library("stringr")
install.packages("tidyverse")
?subtr
?substr
nchar(lyrics)
nchar(lyric)
nchar(lyric)
?nchar
lyric <-"I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
substr(lyric,15,32)
gsub?
?gsub
?gsub
fruits <- substr(lyric,15,32)
fruits_e <- gsub ("a", "ee", fruits)
fruits_o <- gsub("a", "o", fruits)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <-"I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric,15,32)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub ("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro,fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <-"I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric,15,32)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub ("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro,fruits_o))
my_name = "Yuki Ono"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length = nchar(my_name)
# Exercise 1: calling built-in functions
install.packages(stringr)
# Create a variable `my_name` that contains your name
my_name <- "Yuki Ono"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- my_name + "is programming!"
# Make the `now_doing` variable upper case
toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 23
fav_2 <- 76
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1,fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum,sum_round)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value){
value + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- total_inches * 0.0254
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,10)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value){
value + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- total_inches * 0.0254
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,8)
# Exercise 4: functions and conditionals
# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(str1,str2){
abs(nchar(str1)-nchar(str2)) >= min(str1,str2)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long(apple,banana)
is_twice_as_long(dog,banana)
is_twice_as_long(banana,dog)
# Define a function `describe_difference` that takes in two strings. The
# function should return one of the following sentences as appropriate
#   "Your first string is longer by N characters"
#   "Your second string is longer by N characters"
#   "Your strings are the same length!"
desctribe_difference <- function(str1,str2){
diff <-  nchar(str1) - nchar(str2)
if(diff > 0){
sentence <- paste("Your first string is longer by", diff, "characters")
}
else if(diff < 0){
sentence <- paste("Your second string is longer by", -diff, "characters")
}
else{
sentence <- "Your strings are the same length!"
}
sentence
}
# Call your `describe_difference` function by passing it different length strings
# to confirm that it works. Make sure to check all 3 conditions1
desctribe_difference(apple,banana)
desctribe_difference(dog,banana)
desctribe_difference(banana,dog)
# Exercise 4: functions and conditionals
# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(str1,str2){
abs(nchar(str1)-nchar(str2)) >= min(str1,str2)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("apple","banana")
is_twice_as_long("dog","banana")
is_twice_as_long("banana","dog")
# Define a function `describe_difference` that takes in two strings. The
# function should return one of the following sentences as appropriate
#   "Your first string is longer by N characters"
#   "Your second string is longer by N characters"
#   "Your strings are the same length!"
desctribe_difference <- function(str1,str2){
diff <-  nchar(str1) - nchar(str2)
if(diff > 0){
sentence <- paste("Your first string is longer by", diff, "characters")
}
else if(diff < 0){
sentence <- paste("Your second string is longer by", -diff, "characters")
}
else{
sentence <- "Your strings are the same length!"
}
sentence
}
# Call your `describe_difference` function by passing it different length strings
# to confirm that it works. Make sure to check all 3 conditions1
desctribe_difference("apple","banana")
desctribe_difference("dog","banana")
desctribe_difference("banana","dog")
is_twice_as_long <- function(str1,str2){
abs(nchar(str1)-nchar(str2)) >= min(nchar(str1),nchar(str2))
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("apple","banana")
is_twice_as_long("dog","banana")
is_twice_as_long("banana","dog")
df <- read.csv("//data/Sale_Prices_State.csv")
df <- read.csv("../data/Sale_Prices_State.csv")
library("shiny")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lubridate")
library("stringr")
df <- read.csv("../data/Sale_Prices_State.csv")
setwd("~/Desktop/INFO201/final-project-zillow/script")
df <- read.csv("../data/Sale_Prices_State.csv")
View(df)
df_ave <- mutate(df, value = lapply(df, 1, mean, na.rm = T))
df_ave <- mutate(df, value = apply(df, 1, mean, na.rm = T))
View(df_ave)
df_ave <- mutate(df, value = apply(df, 1, mean, na.rm = TRUE))
df_ave <- mutate(df, value = df$X2008.03) %>%
select(RegionName, X2008.03)
colnames(df_ave) <- c(region, value)
colnames(df_ave) <- c("region", "value")
install.packages("choroplethr")
library(choroplethr)
library("choroplethr")
library("choroplethr")
install.packages("choroplethr")
library("choroplethr")
state_choropleth(df_ave)
install.packages("choroplethr")
library("choroplethr")
update.packages(checkBuilt = TRUE)
runApp()
runApp('~/Desktop/INFO201/final-project-zillow')
install.packages("rbokeh")
runApp('~/Desktop/INFO201/final-project-zillow')
