quiet_intro <- tolower(my_intro)
capitalized <- str_to_title(my_intro)
occurrences <- str_count(my_intro, "e")
?lapply
rm(ls=ls())
rm(list=ls())
occurrences <- str_count(my_intro, "e")
my_age <- 21
# Create a variable `my_name` that is equal to your first name
my_name <- "Yuki"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day >= hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age){
paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is ","Hey, I'm ", my_intro )
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
cube <- function(value){
value ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
movies <- c("kingsman", "InterSteller", "Imitation_game", "Harry_Potter", "Fantastic_beast", "gardians_of_garaxy")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
excited <- lapply(movies,paste, " is a great movie!")
withour_four <- movies[-4]
numbers <- c(700:999)
numbers2 <- c(70:79)
len <- length(numbers)
numbers_mean <- mean(numbers)
numbers_median <- median(numbers)
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
?as.Date
today <- as.Date(Sys.Date)
today <- Sys.Date
today <- Sys.Date()
today <- as.Date(Sys.Date())
summer_break <- as.Date("2019-06-14")
days_to_break <- summer_break - today
days_to_break <- as.Date(summer_break - today)
days_to_break <- summer_break - today
days_to_break
print("I have a", " cat")
print(paste0("I have a"," cat"))
make_birthday_intro <- function(name, age, birthday){
make_introduction(name, age)
paste0(print("In ", as.Date(birthday)-today, " days I'll be", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-04-21")
make_birthday_intro <- function(name, age, birthday){
make_introduction(name, age)
print(paste0("In ", as.Date(birthday)-today, " days I'll be", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-04-21")
make_birthday_intro <- function(name, age, birthday){
print(make_introduction(name, age))
print(paste0("In ", as.Date(birthday)-today, " days I'll be", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-04-21")
remove_digits <- function(value){
chartr("1-9", "", value)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(value){
chartr("1-9", " ", value)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(value){
chartr("1-9", " ", value)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(value){
str_extract_all(value, a:z, simplify = TRUE)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(value){
str_extract_all(value, "[a:z]", simplify = TRUE)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(value){
str_extract_all(value, "[a:z]")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(value){
str_replace_all(value, "[0-9]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
my_intro <- make_introduction(my_name, my_age)
remove_digits <- function(value){
str_replace_all(value, "[0-9]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(17, 14, 19, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_allowed <- c(19, 24, 21, 30)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points, points_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$points - games$points_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$points > games$points_allowed
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Indianapolis", "Los Angels", "Minnesota", "Oakland")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
?ruif
?runif
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_2018 > salaries$salaries_2017
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salary_57 <- salaries[salaries$employees = "Employee 57", "Saralies_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
got_highest_raise <- salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- min(salaries$salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
got_lowest_raise <- salaries[salaries$salary_adjustments == lowest_raise, "employees"]
# What was the average salary change?
average_raise <- mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
average_paycut <- mean(salaries$salary_adjustments[salaries$got_raise == FALSE])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
rm(list=ls())
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_2018 > salaries$salaries_2017
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salary_57 <- salaries[salaries$employees = "Employee 57", "Saralies_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
got_highest_raise <- salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- min(salaries$salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
got_lowest_raise <- salaries[salaries$salary_adjustments == lowest_raise, "employees"]
# What was the average salary change?
average_raise <- mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
average_paycut <- mean(salaries$salary_adjustments[salaries$got_raise == FALSE])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
rm(list=ls())
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
# What are the column names of your dataframe?
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
# Add a column "category" to your data frame that contains the rownames
# How much money was spent on personal care in 1940?
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
is.data.frme(USPersonalExpenditure)
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frme(USPersonalExpenditure)
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
is.data.frame("USPersonalExpenditure")
us_exp <- data.frame(USPersonalExpenditure)
colnames(us_exp)
rownames(us_exp)
seatbelts_df <- data.frame(Seatbelts)
View(seatbelts_df)
View(USPersonalExpenditure)
View(us_exp)
us_exp$"category" <- colnames(us_exp)
View(USPersonalExpenditure)
us_exp$"category" <- rownames(us_exp)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_exp <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(us_exp)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(us_exp)
# Add a column "category" to your data frame that contains the rownames
us_exp$"category" <- rownames(us_exp)
# How much money was spent on personal care in 1940?
care_1940 <- us_exp["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- us_exp["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
high_exp_1960 <- us_exp$category[us_exp$X1960 == max(us_exp$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
col <- paste0("X",year)
us_exp$category[us_exp$col == min(us_exp$col)]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_exp <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(us_exp)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(us_exp)
# Add a column "category" to your data frame that contains the rownames
us_exp$"category" <- rownames(us_exp)
# How much money was spent on personal care in 1940?
care_1940 <- us_exp["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- us_exp["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
high_exp_1960 <- us_exp$category[us_exp$X1960 == max(us_exp$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
col <- paste0("X",year)
us_exp$category[us_exp$col == min(us_exp[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
View(lowest)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_exp <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(us_exp)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(us_exp)
# Add a column "category" to your data frame that contains the rownames
us_exp$"category" <- rownames(us_exp)
# How much money was spent on personal care in 1940?
care_1940 <- us_exp["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- us_exp["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
high_exp_1960 <- us_exp$category[us_exp$X1960 == max(us_exp$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
col <- paste0("X",year)
us_exp$category[us_exp[, col] == min(us_exp[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
setwd("~/Desktop/INFO201/exercises-yukisea/chapter-10-exercises/exercise-4")
read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean_total_amount <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
largest_amount <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
lowest_amount <- min(grants$total_amount)
# Which organization received the largest grant?
largest_organization <- grants[grants$total_amount == largest_amount, "organization"]
# Which organization received the smallest grant?
lowest_organization <- grants[grants$total_amount == lowest_amount, "organization"]
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == 2010])
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == 2010, ])
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == 2010, ])
setwd("~/")
setwd("~/Desktop/INFO201/exercises-yukisea/chapter-10-exercises/exercise-5")
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
names_2013 <- names[names$year == 2013, ]
names_2013 <- names[names$year == 2013, ]
View(names)
most_pop_name_2013 <- names_2013[names_2013$prop == max(names_2013$prop), name]
# What was the most popular female name in 2013?
most_pop_name_2013 <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
most_popular_in_year <- function(year){
names_year <- names[names$year == year, ]
most_pop_name_year <- names_year[names_year$prop == max(names_year$prop), "name"]
most_pop_name_year
}
# What was the most popular female name in 1994?
most_pop_1994 <- most_popular_in_year(1994)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == "name", "prop"]
names_number_in_million <- names_popularity$prop * 1000000
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == name, "prop"]
names_number_in_million <- names_popularity$prop * 1000000
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == name, "prop"]
names_number_in_million <- names_popularity$prop * 1000000
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == name, "prop"]
names_number_in_million <- names_popularity * 1000000
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == name, "prop"]
names_number_in_million <- round(names_popularity * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == name, "prop"]
names_number_in_million <- round(names_popularity * 1000000, 1)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
number_in_million <- function(name, year){
names_popularity <- names[names$year == year & names$name == name, "prop"]
names_number_in_million <- round(names_popularity * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_1995 <- number_in_million("Laura", 1995)
yuki_1997 <- number_in_million("yuki", 1997)
setwd("~/Desktop/INFO201/exercises-yukisea/chapter-10-exercises/exercise-5")
